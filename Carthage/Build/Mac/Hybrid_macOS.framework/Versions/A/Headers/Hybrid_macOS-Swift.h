// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AppKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Hybrid_macOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC12Hybrid_macOS11FlippedView")
@interface FlippedView : NSView
@property (nonatomic, readonly, getter=isFlipped) BOOL flipped;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12Hybrid_macOS9LayerView")
@interface LayerView : FlippedView
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12Hybrid_macOS11GraphicView")
@interface GraphicView : LayerView
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


/// <h2>Examples:</h2>
/// let btn:Button = .init(frame: .init(x:0,y:0,width:120,height:40))
/// view.addSubview(btn)
/// btn.tapUpInsideCallBack = { Swift.print(‚Äúüéâ‚Äù) }
/// note:
/// ConstraintKind: Makes the component work with bulk autolayout functionality and animation
/// <ul>
///   <li>
///     Fixme: ‚ö†Ô∏èÔ∏è Style could be StyleKind and then be overriden in subclasses?
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12Hybrid_macOS6Button")
@interface Button : GraphicView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


@interface Button (SWIFT_EXTENSION(Hybrid_macOS))
- (void)drawLayout;
@end

@class NSEvent;

@interface Button (SWIFT_EXTENSION(Hybrid_macOS))
/// Mouse down
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Mouse up
/// <ul>
///   <li>
///     Important ‚ö†Ô∏èÔ∏è Remember to set .isEnabled = false for views that may cover and claim viewUnderMouse, then upInside wont work
///   </li>
/// </ul>
- (void)mouseUp:(NSEvent * _Nonnull)event;
@end


@interface Button (SWIFT_EXTENSION(Hybrid_macOS))
/// Overridable
- (void)onUp;
/// Overridable
- (void)onUpInside;
/// Overridable
- (void)onUpOutside;
/// Overridable
- (void)onDown;
@end




@interface Button (SWIFT_EXTENSION(Hybrid_macOS))
/// Fires when the mouse enters the tracking area, regardless if it is overlapping with other trackingAreas of other views
/// note:
/// if you override this method in subclasses, then also call the the super of this method to avoid loss of functionality
- (void)mouseEntered:(NSEvent * _Nonnull)event;
/// Fires when the mouse exits the tracking area, regardless if it is overlapping with other trackingAreas of other views
/// note:
/// if you override this method in subclasses, then also call the the super of this method to avoid loss of functionality
- (void)mouseExited:(NSEvent * _Nonnull)event;
/// MouseMoved
/// note:
/// mouseMoved doesn‚Äôt work if the leftmouse button is pressed, then mouseDragged is used instead
- (void)mouseMoved:(NSEvent * _Nonnull)event;
/// This is the last NSView so we dont forward the hitTest to further descendants, however we could forward the hit test one more step to the CALayer
/// <ul>
///   <li>
///     Fixme: ‚ö†Ô∏èÔ∏è the logic inside this method should be in the Shape, and this method should just forward to the shape, if there is a shape
///   </li>
/// </ul>
- (NSView * _Nullable)hitTest:(NSPoint)point SWIFT_WARN_UNUSED_RESULT;
/// note:
/// we could keep the trackingArea in lower level shapes/graphics so it‚Äôs always easy to access, but i don‚Äôt think it needs to be easily accesible atm.
/// <ul>
///   <li>
///     Abstract: the only way to update trackingArea is to remove it and add a new one
///   </li>
///   <li>
///     Fixme: ‚ö†Ô∏èÔ∏è should probably not have .mouseMoved here, but rather only add it for <code>onOut</code> events
///   </li>
/// </ul>
/// \param owner is the instance that receives the interaction event
///
- (void)updateTrackingAreas;
/// When the mouse enters the tracking area or tracking shape (Overridable)
- (void)onOver;
/// When the mouse exits the tracking area or tracking shape (Overridable)
- (void)onOut;
@end




/// CheckBoxButton
SWIFT_CLASS("_TtC12Hybrid_macOS14CheckBoxButton")
@interface CheckBoxButton : NSView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end








/// <h2>Examples:</h2>
/// let btn:CHeckButton= .init()
/// view.addSubview(btn)
/// btn.selected = true
SWIFT_CLASS("_TtC12Hybrid_macOS11CheckButton")
@interface CheckButton : Button
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface CheckButton (SWIFT_EXTENSION(Hybrid_macOS))
/// onTapUpInside
- (void)onUpInside;
@end








@interface GraphicView (SWIFT_EXTENSION(Hybrid_macOS))
- (void)layout;
/// Draw layout (Mutal layout call for iOS and macOS)
- (void)drawLayout;
@end


/// <ul>
///   <li>
///     Fixme: ‚ö†Ô∏èÔ∏è Probably rename to onMoveCallback, or move, or moveCallBack et
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12Hybrid_macOS15InteractiveView")
@interface InteractiveView : GraphicView
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end




@interface InteractiveView (SWIFT_EXTENSION(Hybrid_macOS))
/// Mouse down
- (void)mouseDown:(NSEvent * _Nonnull)event;
/// Mouse up
- (void)mouseUp:(NSEvent * _Nonnull)event;
/// Mouse dragged
- (void)mouseDragged:(NSEvent * _Nonnull)event;
@end





SWIFT_CLASS("_TtC12Hybrid_macOS11MinusButton")
@interface MinusButton : Button
/// Draw 1 line
/// note:
/// we draw graphics here because it‚Äôs the only pace where .frame is available when using auto layout
- (void)drawLayout;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Note: - use self.textColor to set text color
SWIFT_CLASS("_TtC12Hybrid_macOS7NSLabel")
@interface NSLabel : NSTextField
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end








@interface NSLabel (SWIFT_EXTENSION(Hybrid_macOS))
- (NSView * _Nullable)hitTest:(NSPoint)point SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS("_TtC12Hybrid_macOS10PlusButton")
@interface PlusButton : Button
/// Draw 2 lines that cross each other
/// note:
/// we draw graphics here because it‚Äôs the only pace where .frame is available when using auto layout
- (void)drawLayout;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12Hybrid_macOS12SelectButton")
@interface SelectButton : Button
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SelectButton (SWIFT_EXTENSION(Hybrid_macOS))
/// Fixme: ‚ö†Ô∏èÔ∏è This is not needed as you can set it in style
- (void)drawLayout;
@end




@interface SelectButton (SWIFT_EXTENSION(Hybrid_macOS))
/// onTapUpInside
- (void)onUpInside;
@end




SWIFT_CLASS("_TtC12Hybrid_macOS10TextButton")
@interface TextButton : Button
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12Hybrid_macOS20SelectableTextButton")
@interface SelectableTextButton : TextButton
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SelectableTextButton (SWIFT_EXTENSION(Hybrid_macOS))
/// onTapUpInside
- (void)onUpInside;
@end


@interface SelectableTextButton (SWIFT_EXTENSION(Hybrid_macOS))
/// note:
/// We have to store the constraints because we animate them
/// note:
/// This is the only place to get frame.height consistently (when you use either AutoLayout or CGRect based layout)
- (void)drawLayout;
@end






/// <ul>
///   <li>
///     Fixme: ‚ö†Ô∏èÔ∏è Don‚Äôt use autolayout inside the component (override layoutSubviews and set things with CGFloats etc)
///   </li>
///   <li>
///     Fixme: ‚ö†Ô∏èÔ∏è Add support for thumb.size based on background height
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12Hybrid_macOS6Slider")
@interface Slider : NSView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end








@interface Slider (SWIFT_EXTENSION(Hybrid_macOS))
- (void)layout;
/// Called when autolayout changes on the entire component (Beta)
- (void)drawLayout;
@end




/// <h2>Examples:</h2>
/// let spinner:Spinner = .init()
/// addSubview(spinner)
/// spinner.onChange = {value in Swift.print(‚Äù(value)‚Äù)}
SWIFT_CLASS("_TtC12Hybrid_macOS7Spinner")
@interface Spinner : NSView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end






/// <h2>Examples:</h2>
/// let stepper:Stepper = .init()
/// view.addSubview(stepper)
/// stepper.onChange = {value in Swift.print(‚Äúvalue:  (value)‚Äù)}
SWIFT_CLASS("_TtC12Hybrid_macOS7Stepper")
@interface Stepper : NSView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end










SWIFT_CLASS("_TtC12Hybrid_macOS6Switch")
@interface Switch : Button
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




@interface Switch (SWIFT_EXTENSION(Hybrid_macOS))
/// onTapUpInside
- (void)onUpInside;
@end








/// SwitchButton
SWIFT_CLASS("_TtC12Hybrid_macOS12SwitchButton")
@interface SwitchButton : NSView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end








SWIFT_CLASS("_TtC12Hybrid_macOS16SwitchForeground")
@interface SwitchForeground : GraphicView
/// Boilerplate
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect SWIFT_UNAVAILABLE;
@end


@interface SwitchForeground (SWIFT_EXTENSION(Hybrid_macOS))
- (void)drawLayout;
- (NSView * _Nullable)hitTest:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
@end







SWIFT_CLASS("_TtC12Hybrid_macOS5Thumb")
@interface Thumb : InteractiveView
/// Mouse dragged
- (void)mouseDragged:(NSEvent * _Nonnull)event;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12Hybrid_macOS5Track")
@interface Track : InteractiveView
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12Hybrid_macOS12VolumeSlider")
@interface VolumeSlider : Slider
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
